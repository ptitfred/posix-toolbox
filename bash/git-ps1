#==============================================================================
# The MIT License
#
# Copyright (c) 2010-, Frédéric Menou
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#==============================================================================

# Prompt Bash pour l'affichage du statut Git (si dans un dépôt Git)
# A ajouter dans votre ~/.bashrc :
# TBX=$HOME/posix-toolbox # emplacement à choisir
# PATH=$TBX:$PATH
# GIT_BASH=$TBX/bash/git-ps1
# if [ -f $GIT_BASH ]; then
# 	. $GIT_BASH
# fi


# Scavenged from Git 1.6.5.x contrib/completion/git_completion.bash
# __git_ps1 accepts 0 or 1 arguments (i.e., format string)
# returns text to add to bash PS1 prompt (includes branch name)
__gitdir ()
{
  if [ -z "${1-}" ]; then
    if [ -n "${__git_dir-}" ]; then
      echo "$__git_dir"
    elif [ -d .git ]; then
      echo .git
    else
      git rev-parse --git-dir 2>/dev/null
    fi
  elif [ -d "$1/.git" ]; then
    echo "$1/.git"
  else
    echo "$1"
  fi
}
__git_ps1 ()
{
  local g="$(__gitdir)"
  if [ -n "$g" ]; then
    local disable="$(git config --local --int --get ps1.disable)"
    local shorten="$(git config --int --get ps1.shorten)"
    if [ "$disable" = "1" ]; then
      git_pwd=$(git pwd)
      printf " (%s:%s) " "-" "${git_pwd}"
    else
      local r
      local b
      if [ -f "$g/rebase-merge/interactive" ]; then
        r="|REBASE-i"
        b="$(cat "$g/rebase-merge/head-name")"
      elif [ -d "$g/rebase-merge" ]; then
        r="|REBASE-m"
        b="$(cat "$g/rebase-merge/head-name")"
      else
        if [ -d "$g/rebase-apply" ]; then
          if [ -f "$g/rebase-apply/rebasing" ]; then
            r="|REBASE"
          elif [ -f "$g/rebase-apply/applying" ]; then
            r="|AM"
          else
            r="|AM/REBASE"
          fi
        elif [ -f "$g/MERGE_HEAD" ]; then
          r="|MERGING"
        elif [ -f "$g/BISECT_LOG" ]; then
          r="|BISECTING"
        fi
  
        b="$(git symbolic-ref HEAD 2>/dev/null)" || {
  
          b="$(
          case "${GIT_PS1_DESCRIBE_STYLE-}" in
          (contains)
            git describe --contains HEAD ;;
          (branch)
            git describe --contains --all HEAD ;;
          (describe)
            git describe HEAD ;;
          (* | default)
            git describe --exact-match HEAD ;;
          esac 2>/dev/null)" ||
  
          b="$(cut -c1-7 "$g/HEAD" 2>/dev/null)..." ||
          b="unknown"
          b="($b)"
        }
      fi
  
      local w
      local i
      local s
      local u
      local c
  
      if [ "true" = "$(git rev-parse --is-inside-git-dir 2>/dev/null)" ]; then
        if [ "true" = "$(git rev-parse --is-bare-repository 2>/dev/null)" ]; then
          c="BARE:"
        else
          b="GIT_DIR!"
        fi
      elif [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
        if [ -n "${GIT_PS1_SHOWDIRTYSTATE-}" ]; then
          if [ "$(git config --bool bash.showDirtyState)" != "false" ]; then
            git diff --no-ext-diff --ignore-submodules \
              --quiet --exit-code || w="*"
            if git rev-parse --quiet --verify HEAD >/dev/null; then
              git diff-index --cached --quiet \
                --ignore-submodules HEAD -- || i="+"
            else
              i="#"
            fi
          fi
        fi
        if [ -n "${GIT_PS1_SHOWSTASHSTATE-}" ]; then
                git rev-parse --verify refs/stash >/dev/null 2>&1 && s="$"
        fi
  
        if [ -n "${GIT_PS1_SHOWUNTRACKEDFILES-}" ]; then
           if [ -n "$(git ls-files --others --exclude-standard)" ]; then
              u="%"
           fi
        fi
      fi

      local branch_name=${b##refs/heads/}
      if [ "$shorten" == "1" ]; then
        branch_name=$(short-path ${b##refs/heads/})
      fi
  
      if [ -n "${1-}" ]; then
        printf "$1" "$c$branch_name$w$i$s$u$r"
      else
        git_pwd=$(git pwd)
        if [ "$shorten" == "1" ]; then
          git_pwd=$(short-path $git_pwd)
        fi
        if [ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
          printf " (%s:%s)" "$c$branch_name$w$i$s$u$r" "${git_pwd}"
        else
          printf " (%s)" "$c$branch_name$w$i$s$u$r"
        fi
      fi
    fi
  fi
}

export GIT_PS1_SHOWDIRTYSTATE=1 GIT_PS1_SHOWUNTRACKEDFILES=1 GIT_PS1_SHOWSTASHSTATE=1

__pwd() {
  local shorten="$(git config --int --get ps1.shorten)"
  local in_git_repo="$(git rev-parse --is-inside-work-tree 2>/dev/null)"
  local path="$(prd)"
  if [ "true" == "$in_git_repo" ]; then
    path="$(git prd)"
  fi
  if [ "1" == "$shorten" ]; then
    path="$(short-path $path)"
  fi
  printf "%s" "$path"
}


DEFAULT_THRESHOLD=100

function getThresholdFromConfiguration {
	git config --int --get "check.threshold" || echo $DEFAULT_THRESHOLD
}

# En fait l'important ici c'est le "\033[1;32m\]$(__git_ps1)\[\033[0m\]", le reste c'est mon prompt usuel…
now() {
	date +%H:%M
}

find-up() {
	local filename=$1
	if [ -r $filename ]; then
		echo $filename
	fi
}

update_tmux_title() {
	local tmux_title_file=$(find-up .tmux-title)
	if [ -n "$tmux_title_file" ]; then
		name=$(head -1 < $tmux_title_file)
		printf "\033k$name\033\\"
	fi
}

color() {
	printf "\033[$1m"
}

PS1='$(update_tmux_title)\[$(color "0;237")\]$(now)\[$(color "0")\] \[$(color "0;96")\]\u\[$(color "0")\] \[$(color "0;33")\]$(__pwd)\[$(color "0")\]\[$(color "1;32")\]$(__git_ps1)\[$(color "0")\] $ '
